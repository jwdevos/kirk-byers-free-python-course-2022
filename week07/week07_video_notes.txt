##### Most basic J2 example #####
import jinja2

bgp_var = {
    "peer1_ip": "10.255.255.2",
	"peer1_as": "20"
}

bgp_template = '''
feature bgp
router bgp 10
  address-family ipv4 unicast
    network 10.10.200.0/24
  neighbor {{ peer1_ip }} remote-as {{ peer1_as }}
    update-source loopback1
	ebgp-multihop 2
	address-family ipv4 unicast
'''

tmpl = jinja2.Template(bgp_template)
print(tmpl.render(bgp_vars))


##### Separate file #####
template_file = 'nxos_bgp.j2'
with open(template_file) as f:
    bgp_template - f.read()

template = jinja2.Template(bgp_template)
print(template.render(bgp_vars))


##### Added complexity #####
advertised_routes = ['10.10.200.0/24', '10.10.201.0/24']
bgp_var = {
    'local_as': '10',
	'peer1_ip': '10.255.255.2',
	'peer1_as': '20',
	'peer1_ipv6': True,
	'advertised_routes': advertised_routes
}

'''
feature bgp
router bgp {{ local_as }}
  address-family ipv4 unicast
    {%- for route in advertised_routes %}
    network {{ route }}
	{%- endfor %}
  neighbor {{ peer1_ip }} remote-as {{ peer1_as }}
    update-source loopback1
	ebgp-multihop 2
	address-family ipv4 unicast
	{% if per1_ipv6 -%}
	address-family ipv6 unicast
	{% endif %}
'''


##### CSV #####
'''
local_as,peer1_ip,peer1_as,peer1_ipv6,advertised_routes
10,10.255.255.2,20,True,10.10.200.0/24 10.10.201.0/24
'''

import jinja2
import csv

csv_file = 'bgp_variables.csv'
with open(csv_file) as f:
    read_csv = csv.DictReader(f)
	for bgp_vars in read_csv:
	    advertised_routes = bgp_vars['advertised_routes']
		advertised_routes = advertised_routes.split()
		bgp_vars['advertised_routes'] = advertised_routes
		
		template_file = 'nxos_bgp_csv.j2'
		with open(template_file) as f:
		    bgp_template = f.read()
			
		template = jinja2.Template(bgp_template)
		print(template.render(bgp_vars))

##### J2 dictionaries and nested loops #####
bgp_vars = {
    'routers': {
	'sf_rtr1': '10.10.10.1',
	'sf_rtr2': '10.10.10.2',
	'la_rtr1': '10.100.17.1',
	'denver_rtr1': 10.200.2.1',
	},
	
	'ip_list': [
	    '192.168.1.1',
		'10.1.1.1',
		'172.16.1.1',
	],
	
	'ipv4_enabled': False,
	'ipv6_enabled': False,
}

z_template = '''
{%- for router_name, ip_addr in routers.items() %}
{{ router_name }} >>> {{ ip_addr }}
  {%- for ip_addr in ip_list %}
  {{ ip_addr }}
  {%- endfor %}
{%- endfor %}

{%- if ipv4_enabled %}
IPv4 is enabled
{%- if ipv6_enabled %}
IPv6 is enabled
{% endif %}
{% endif %}

{{ routers['sf_rtr1'] }}
{{ routers.sf_rtr1 }}
'''

template = jinja2.Template(z_template)
print(template.render(bgp_vars))


##### YAML basics #####
# YAML doesn't require quotes, except when a string contains special characters
# Booleans: True/False, true/false, on/off, yes/no
# Ints: unquoted absolute numbers
---
# list
- 10.1.1.1
- 10.1.1.2
# dict
rtr1: 10.1.1.1
rtr2: 10.1.1.2
# complex dict
rtr1:
  ip_addr: 10.1.1.1
  username: admin
  password: admin
  device_type: juniper_junos
  bgp_peers:
    - 10.100.1.1
	- 10.100.1.2
rtr2:
  ip_addr: 10.1.1.2
  username: admin
  password: admin
  device_type: cisco_nxos
  bgp_peers:
    - 10.100.1.1
	- 10.100.1.2

import yaml
from pprint import pprint

filename = my_devices.yml
with open(filename) as f:
    output = yaml.load(f)

print(output)


##### YAML advanced #####
# Technically, YAML is a superset of JSON. Anything represented in JSON, can also be read by YAML
# JSON looks a lot like Python's internal data structures
# YAML compressed format:
rtr2:
  ip_addr: 10.1.1.2
  bgp_peers: [10.100.1.1, 10.100.1.2]
rtr3: {ip_addr: 10.1.1.3}


##### Python YAML output #####
# default_flow_style: True geeft compressed YAML, False geeft expanded YAML, default geeft een mix
import yaml

my_dict = {
  'rtr1': {'bgp_peers': ['10.1.1.1', '10.1.1.2'],
          'device_type': 'cisco_ios',
		  'ip_addr': '1.1.1.1'
  'rtr2': {'bgp_peers': ['10.1.1.1', '10.1.1.2'],
          'device_type': 'cisco_ios',
		  'ip_addr': '1.1.1.2'
}

filename = 'output.yml'
with open(filename, 'w') as f:
    output = yaml.dump(my_dict, f, default_flow_style=False)



##### JSON #####
# json.dumps (de laatste s is voor string)
import json

my_list = list(range(10))
my_list.append('whatever')
my_list.append('some thing')

my_dict = {
    'key1': 'val1',
    'key2': 'val2',
    'key3': 'val3',
}
my_dict['key4'] = my_list
my_dict['key5'] = False

print(my_dict)
print(json.dumps(my_dict))

with open('my_file.json', 'w') as f:
    json.dump(my_dict, f, indent=4)


##### Read a JSON file #####
import json
from pprint open pprint

filename = 'my_file.json'
with open(filename) as f:
    json_data = json.load(f)
pprint(json_data)	

















